[
  {
    "path": "posts/2020-12-28-line-graphs-and-interactivity/",
    "title": "Line Graphs and Interactivity",
    "description": "Tableau for Healthcare Chapter 10.  Static and Interactive examples",
    "author": [
      {
        "name": "Kyle Belanger",
        "url": {}
      }
    ],
    "date": "2020-02-10",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nLoad Libraries\r\nImport Data\r\nTransform Data\r\nGGplot\r\nplotly\r\n\r\nTodayâ€™s post is all about line graphs using both ggplot for a static graph as well as a package called plotly for interactivity (more on this later). The example graph and data is again coming from Tableau for Healthcare, Chapter 10. \r\nLoad Libraries\r\nAs always first step is to load in our libraries, I am using quite a few here, some are a bit overkill for this example but I wanted to play around with some fun features today.\r\n\r\n\r\nlibrary(magrittr) #pipes\r\nlibrary(ggplot2) #ploting \r\nlibrary(dplyr)  # data manipulation\r\nlibrary(tidyr) # tidy data\r\nlibrary(lubridate) #work with dates\r\nlibrary(stringr) # manipulate strings\r\nlibrary(plotly)\r\n\r\n\r\n\r\nImport Data\r\nNext lets import our data, this week we are using the sheet Flu Occurrence FY2013-2016. I am unsure if this is form a real data set or not but it is good for demonstration purposes! After importing we can glimpse at our data to understand what is contained within.\r\n\r\n\r\nds <- readxl::read_xlsx(path = \"../2020-12-28-my-start-to-r/Tableau 10 Training Practice Data.xlsx\"\r\n                        ,sheet = \"05 - Flu Occurrence FY2013-2016\"\r\n                        )\r\nds %>% glimpse()\r\n\r\n\r\nRows: 48\r\nColumns: 4\r\n$ Date                                         <dttm> 2012-10-27,...\r\n$ `Tests (+) for Influenza (count)`            <dbl> 995, 3228, 2...\r\n$ `Total Respiratory Specimens Tested (count)` <dbl> 18986, 24757...\r\n$ `% Tests (+) for Influenza`                  <dbl> 0.05240704, ...\r\n\r\nTransform Data\r\nI went a bit overboard today with renaming the variables. I wanted to practice writing a function and while it might not be the prettiest or the best way to do this, it worked for what I was trying to accomplish. Note the use of sapply, which lets us run the function on each column name.\r\n\r\n\r\nformat_names <- function(x) {\r\n  #Fucntion to set all names to lower case, and strip unneeded characters\r\n  x <- tolower(x)\r\n  x <- str_replace_all(x,c(#set each pattern equal to replacement\r\n                       \" \"         = \"_\"\r\n                      ,\"\\\\(\\\\+\\\\)\" = \"pos\"  #regualr experssion to match (+)\r\n                      ,\"\\\\(\"       = \"\"\r\n                      ,\"\\\\)\"       = \"\"\r\n                      ,\"\\\\%\"       = \"pct\"\r\n                      )\r\n                  ) \r\n                }\r\n\r\n#run the format name function on all names from DS\r\ncolnames(ds) <- sapply(colnames(ds),format_names)    \r\n\r\n\r\n\r\nNow is were the fun really starts! For this particular data set there are a couple things we need to add to replicate the example. In the original data set the date is stored with month, day, and year; the day is irrelevant and we need to pull out the month as well as the year. For this we can use the lubridate package, first we pull out the month and set it as a factor. For this example our year actually starts in October, so we set our factor to start at October (10), and end with September (9). We then pull out the year, which presents us with a different problem. Again our year starts in October, instead of January. To solve this I have created a variable called date adjustment, in this column is our month is 10 or greater, we will place a 1, if not a 0. We then set our fiscal year to be the actual year plus the date adjustment, this allows us to have our dates in the right fiscal year. Last the percent column is currently listed as a decimal, so we will convert this to a percentage.\r\n\r\n\r\n# split date time\r\nds1 <- ds %>% mutate(\r\n        #create month column, then set factors and labels to start fiscal year in Oct\r\n        month = month(ds$date)\r\n        ,month = factor(month\r\n                        ,levels = c(10:12, 1:9)\r\n                        ,labels = c(month.abb[10:12],month.abb[1:9]))\r\n       ,year = year(ds$date)\r\n        ,date_adjustment = ifelse(month(ds$date) >= 10, 1,0 )\r\n        ,fiscal_year = factor(year + date_adjustment)\r\n        #convert % Pos from decmial to pct\r\n        ,pct_tests_pos_for_influenza = round(pct_tests_pos_for_influenza * 100, digits = 0)\r\n        )\r\n\r\nds1 %>% glimpse()\r\n\r\n\r\nRows: 48\r\nColumns: 8\r\n$ date                                     <dttm> 2012-10-27, 201...\r\n$ tests_pos_for_influenza_count            <dbl> 995, 3228, 22368...\r\n$ total_respiratory_specimens_tested_count <dbl> 18986, 24757, 66...\r\n$ pct_tests_pos_for_influenza              <dbl> 5, 13, 34, 33, 2...\r\n$ month                                    <fct> Oct, Nov, Dec, J...\r\n$ year                                     <dbl> 2012, 2012, 2012...\r\n$ date_adjustment                          <dbl> 1, 1, 1, 0, 0, 0...\r\n$ fiscal_year                              <fct> 2013, 2013, 2013...\r\n\r\nGGplot\r\nThe graph here is pretty straight forward with one exception, group! For this line graph we want ggplot to connect the lines of the same year, if we do not explicitly state this using the group mapping, ggplot will try to connect all the lines together, which of course is not at all what we want!\r\n\r\n\r\ng1 <- ds1 %>% \r\n    ggplot(aes(x = month, y = pct_tests_pos_for_influenza, color = fiscal_year\r\n               ,group = fiscal_year)) +\r\n  geom_line() +\r\n  labs(\r\n    x  = NULL\r\n    ,y = \"% Tests (+) for Influenza\"\r\n    ,color = NULL\r\n    ,title = \"Flu Viral Surveillance: % Respiratory Specimens Positive for Influenza \\nOctober - September \\nFor Flu Seasons 2013 - 2016\"\r\n  ) +\r\n  theme_classic() +\r\n  scale_y_continuous(breaks = seq(0,40,5)) +\r\n  scale_color_manual(values = c(\"#a6611a\",\"#dfc27d\",\"#80cdc1\",\"#018571\"))\r\n\r\ng1\r\n\r\n\r\n\r\n\r\nplotly\r\nOne of the nice features of Tableau is the fact the graphs are interactive, while a good graph should speak for itself, end users love pretty things. I have been experimenting with Plotly, which has an open source package for R (as well as many other programming languages!). This example only just scratches the surface, but there will be many more to come!\r\n\r\n\r\ng2 <- ds1 %>% \r\n    plot_ly(x = ~month, y = ~pct_tests_pos_for_influenza, type = \"scatter\", mode = \"lines\" \r\n            ,color = ~fiscal_year\r\n            ,colors = c(\"#a6611a\",\"#dfc27d\",\"#80cdc1\",\"#018571\")\r\n            , hoverinfo = 'y') %>% \r\n    layout(xaxis = list(\r\n                        title = \"\"\r\n                    )\r\n           ,yaxis = list(\r\n                        title = \"% Tests (+) for Influenza\"\r\n                    )\r\n           ,title = \"Flu Viral Surveillance: % Respiratory Specimens Positive for Influenza\"\r\n           ,legend = list(\r\n                      x = 100\r\n                      ,y = 0.5\r\n                      )   \r\n           \r\n           )\r\n\r\ng2\r\n\r\n\r\npreserve0ddc9293b1cc8f4f\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-28-line-graphs-and-interactivity/line-graphs-and-interactivity_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2020-12-28T22:08:09-05:00",
    "input_file": "line-graphs-and-interactivity.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-12-28-facets-and-a-lesson-in-humility/",
    "title": "Facets and a Lesson in Humility",
    "description": "A look at Tableau for Healthcare Chapter 8.  Table Lens graph.",
    "author": [
      {
        "name": "Kyle Belanger",
        "url": {}
      }
    ],
    "date": "2020-01-29",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nLoad Libraries\r\nImport Data\r\nClean Names and Transform\r\nGraphs\r\n\r\nTodays post is a lesson in Facets, as well as humility. The task this week was to replicate the graph in Chapter 8 of Tableau for Healthcare in R. The graph in question is called a Table Lens (This is the name the book uses, however I did have trouble finding this name in Google searches), it is a collection of charts with a common theme, this time looking at countries in various WHO regions and some statistics associated with mortality as well as health expenditure. I say this is a lesson in humiltiy as I have read through the excellent book R for Data Science, and yet the idea of faceting a ggplot graph slipped my mind. This ended with hours of trying to find a package in R to line up graphs, and way more time then I care to admit spent on getting things prefect. I did find such a package called cowplots, which can be found here. While this is an excellent package, its use was unecessary and I reverted back to using the excellent facet feature of GGplot, which can be seen below! \r\nLoad Libraries\r\n\r\n\r\nlibrary(magrittr) #pipes\r\nlibrary(ggplot2) #ploting \r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\n\r\n\r\n\r\nImport Data\r\n\r\n\r\nds <- readxl::read_xlsx(path = \"../2020-12-28-my-start-to-r/Tableau 10 Training Practice Data.xlsx\"\r\n                        ,sheet = \"03 - WHO Life Expect & Mort\"\r\n                        )\r\n\r\n\r\n\r\nClean Names and Transform\r\n\r\n\r\nvarnames <-  c(\"who_region\", \"country\", \"year\" , \"sex\" , \"life_expect_birth\" , \"neo_mort\"\r\n               ,\"under_five_mort\" , \"health_expenditure\")\r\nnames(ds) <- varnames\r\n\r\n# Order Countries based on Life Expectancy at Birth\r\n\r\nds$country <- factor(ds$country, levels = ds$country[order(ds$life_expect_birth)]) \r\n\r\n#To \"Long\" Form\r\n\r\nds1 <-  ds %>% pivot_longer(5:8)#select columns 5 throuh 8, leave new columns at default names\r\n\r\n# Set up labels for Facet, as well as function for Facet Labeller\r\n\r\nfacet_labels <-  list(\r\n\"life_expect_birth\"   = \"Life Expectancy at Birth \"                            \r\n,\"neo_mort\"           = \"Neonatal Mortality Rate\"             \r\n,\"under_five_mort\"    = \"Under-Five Mortality Rate\"\r\n,\"health_expenditure\" = \"Health Expenditure per Capita (US$)\"  )\r\n\r\nvariable_labeller <- function(variable,value){\r\n  return(facet_labels[value])\r\n}\r\n\r\n\r\n\r\nGraphs\r\n\r\n\r\nhightlight_countries <- (c(\"Mauritania\", \"South Africa\")) \r\n\r\ng1 <-  ds1 %>% filter(who_region == \"Africa\") %>% \r\n  mutate(name = factor(name, levels = c(\"life_expect_birth\" , \"neo_mort\"\r\n               ,\"under_five_mort\" , \"health_expenditure\"))\r\n         ,highlight = country %in% hightlight_countries) %>% \r\n  ggplot(aes(x = country, y = value, fill = highlight)) +\r\n  geom_col(show.legend = FALSE) +\r\n  coord_flip() +\r\n  labs(\r\n    title = \"World Bank Life Expectancy, Neonatal & Under-Five Mortality Rates, and Health Expenditure Analysis\"\r\n    ,x  = NULL\r\n    ,y = NULL\r\n  ) +\r\n  facet_grid(~name, scales = \"free_x\",labeller = variable_labeller) +\r\n  theme_bw() +\r\n  geom_text(aes(label = round(value, 0)), hjust = 0) +\r\n  scale_y_continuous(expand = expand_scale(mult = c(0,0.2))) +\r\n  scale_fill_manual(values = c(\"TRUE\" = \"#fc8d59\", \"FALSE\" = \"#2b83ba\"))\r\ng1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-28-facets-and-a-lesson-in-humility/facets-and-a-lesson-in-humility_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2020-12-28T22:02:50-05:00",
    "input_file": "facets-and-a-lesson-in-humility.utf8.md",
    "preview_width": 2304,
    "preview_height": 1344
  },
  {
    "path": "posts/2020-12-28-my-start-to-r/",
    "title": "My Start to R",
    "description": "A short introduction to my blog, and R journey.",
    "author": [
      {
        "name": "Kyle Belanger",
        "url": {}
      }
    ],
    "date": "2020-01-24",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nLoad Libraries\r\nImport Data\r\nClean Data Names\r\nConvert Data to â€˜Long Formâ€™\r\nGraph 5.1\r\n\r\nToday starts my attempt at sharing my R journey with the world! I have been learning R off and on now since late 2019, I have begun to take it much more serious as I work through my Data Analytics class at UCF. My love for all things numbers and graphs has really blossomed, and I am choosing to share that love with anyone who cares to read. I will not claim to be the best at R, or any programming for that matter, but these are my attempts. Each post in this serious will be replicated a graph created in Tableau from the book Tableau for Healthcare. Todays graph is a simple horizontal bar chart, in transferring to both a new blog site and computer I have unfortunately lost the original bar graph, but trust me the one I created looks just like it.\r\nLoad Libraries\r\n\r\n\r\nlibrary(tidyr)\r\nlibrary(magrittr)\r\nlibrary(ggplot2)\r\nlibrary(stringr)\r\nlibrary(dplyr)\r\n\r\n\r\n\r\nImport Data\r\n\r\n\r\nds <- readxl::read_excel(\r\n    path   = \"Tableau 10 Training Practice Data.xlsx\" \r\n    ,sheet = \"02 - Patient Falls-Single Hosp\"\r\n    )\r\n\r\n\r\n\r\nClean Data Names\r\n\r\n\r\n#should make reusable forumla at later time\r\nnames(ds) <- tolower(names(ds))\r\nnames(ds) <- str_replace_all(names(ds),\" \", \"_\")\r\n\r\n\r\n\r\nConvert Data to â€˜Long Formâ€™\r\n\r\n\r\nds1 <- ds %>% \r\n  gather(\"patient_falls_no_injury_rate\" , \"patient_falls_with_injury_rate\"\r\n         ,key   = \"injury\" \r\n         ,value = \"rate\" ) %>% \r\n  mutate(injury = (injury == \"patient_falls_with_injury_rate\"))\r\n\r\n\r\n\r\nGraph 5.1\r\n\r\n\r\nb1 <- ds %>% \r\n  ggplot(mapping = aes(x = reorder(type_of_care,total_patient_falls_rate ) , y = total_patient_falls_rate)) +\r\n  geom_col(fill = \"#2b83ba\") + \r\n  coord_flip() +\r\n  scale_y_continuous(breaks = NULL) +\r\n  theme(axis.ticks = element_blank()) +\r\n  labs(title = \"Rate of Patient Falls (per 1,000 Pateint Days)\\nby Type of Care for FY2017\"\r\n      ,x     = NULL\r\n      ,y     = NULL\r\n      ) +\r\n  theme_classic() +\r\n  geom_text(aes(label = format(total_patient_falls_rate, digits = 2)), nudge_y = -.25, color = \"white\")\r\n  \r\nb1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-28-my-start-to-r/my-start-to-r_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2020-12-28T21:58:03-05:00",
    "input_file": "my-start-to-r.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  }
]
